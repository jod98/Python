'''
Question:

Write a Python program that will prompt the user for an excel file. Once the user inputs the file name,
the program will give the user three choices of visualisations to generate i.e. Bar Charts, Pie Charts etc.
Once the user selects the type of visualisation, the program should generate that visualisation.
The visualisations should include titles, labels and legends which should be autogenerated from the excel file headings.

Submission:

Submit the .py file (Visualise_Data.py) and the excel file (in order for program to work they need to be in the same directory).
Also, submit a video/screencast demoing how this program actually works.

Program Details:
- This program uses the iris dataset (dataset of 3 iris flower types, namely; 'Setosa', 'Versicolour' and 'Virginica'.
  The dataset examines the variations in the species from their Sepal Length, Sepal Width, Petal Length and Petal Width.
  It is a popular dataset for Python visualisations and contains 150 rows of attributes.

- The program prompts the user to enter their excel file name (in this case "iris.csv"). After the dataset directory has been identified,
  the user is asked which visualisation they would like from the following 3; 'Scatter Chart', 'Histogram Chart' or 'Bar Chart'.
  The data from the excel file is then represented in a visualisation of the user's choosing via popular graphing libraries and external tools
  like Matplotlib, Pandas and Seaborn. The appropriate titles, labels and legends are provided for all visualisations.
'''

##################################################### DEPENDENCIES + PACKAGES ####################################################################
import pandas as pd  # Data manipulation and analysis library
import matplotlib.pyplot as plt  # Plotting library
import seaborn as sns  # Data visualization library based on matplotlib


####################################################### FUNCTIONS/ METHODS ####################################################################

# Function to produce a scatter chart of the attributes we wish to plot
def plot_scatter(scatter_attributes):
    if scatter_attributes == "SLSW":
        dataset.plot(kind="scatter", x="SepalLengthCm", y="SepalWidthCm")
        plt.xlabel('Sepal Length (CM)')
        plt.ylabel('Sepal Width (CM)')
        plt.title("Sepal Length against Sepal Width Visualisation Plot - Iris Dataset")
        plt.show()

    if scatter_attributes == "PLPW":
        dataset.plot(kind="scatter", x="PetalLengthCm", y="PetalWidthCm")
        plt.xlabel('Petal Length (CM)')
        plt.ylabel('Petal Width (CM)')
        plt.title("Petal Length against Petal Width Visualisation Plot - Iris Dataset")
        plt.show()


# Function to produce a histogram chart of the attributes we wish to plot
def plot_histogram(histogram_attributes):
    if histogram_attributes == "SL":
        plt.hist(dataset["SepalLengthCm"], bins=20, color="green")
        plt.title("Sepal Length Visualisation Plot - Iris Dataset")
        plt.xlabel("Sepal Length (CM)")
        plt.ylabel("Count")
        plt.show()

    if histogram_attributes == "SW":
        plt.hist(dataset["SepalWidthCm"], bins=20, color="green")
        plt.title("Sepal Width Visualisation Plot - Iris Dataset")
        plt.xlabel("Sepal Width (CM)")
        plt.ylabel("Count")
        plt.show()

    if histogram_attributes == "PL":
        plt.hist(dataset["PetalLengthCm"], bins=20, color="green")
        plt.title("Petal Length Visualisation Plot - Iris Dataset")
        plt.xlabel("Petal Length (CM)")
        plt.ylabel("Count")
        plt.show()

    if histogram_attributes == "PW":
        plt.hist(dataset["PetalWidthCm"], bins=20, color="green")
        plt.title("Petal Width Visualisation Plot - Iris Dataset")
        plt.xlabel("Petal Width (CM)")
        plt.ylabel("Count")
        plt.show()


# Function to produce a Bar chart of the 3 iris flower species
def plot_Bar():
    sns.countplot('Species', data=dataset)  # Using seaborn (sns) library to plot a bar chart of 3 iris species
    plt.title("Iris Flower Species Visualisation Plot - Iris Dataset")
    plt.show()


# Function that determines which graph and corresponding attributes to visualise
def visualisation_choice():
    # Requesting user's graph choice
    graph = input("\nEnter '1' for Scatter Chart: "
                  "\nEnter '2' for Histogram Chart: "
                  "\nEnter '3' for Bar Chart: \n")

    # Scatter Plot
    if int(graph) == 1:
        print("You have selected Scatter Chart!")
        # Requesting user's visualisation requirements. What attributes from the data would they like to plot against one another?
        scatter_plot_attributes = input("\nEnter 'SLSW' to plot: 'Sepal Length against Sepal Width':\n"
                                        "Enter 'PLPW' to plot: 'Petal Length against Petal Width':\n")

        if scatter_plot_attributes == 'SLSW':
            print("You have selected to plot 'Sepal Length against Sepal Width'")

        if scatter_plot_attributes == 'PLPW':
            print("You have selected to plot 'Petal Length against Petal Width'")

        plot_scatter(scatter_plot_attributes)

    # Histogram Plot
    if int(graph) == 2:
        print("You have selected Histogram!")
        histogram_plot_attributes = input("\nEnter 'SL' to plot: 'Sepal Length':\n"
                                          "Enter 'SW' to plot: 'Sepal Width':\n"
                                          "Enter 'PL' to plot: 'Petal Length':\n"
                                          "Enter 'PW' to plot: 'Petal Width':\n")

        if histogram_plot_attributes == 'SL':
            print("You have selected to plot 'Sepal Length'")

        if histogram_plot_attributes == 'SW':
            print("You have selected to plot 'Sepal Width'")

        if histogram_plot_attributes == 'PL':
            print("You have selected to plot 'Petal Length'")

        if histogram_plot_attributes == 'PW':
            print("You have selected to plot 'Petal Width'")

        plot_histogram(histogram_plot_attributes)

    # Bar Plot
    if int(graph) == 3:
        print("You have selected Bar Chart!")
        plot_Bar()


############################################################## MAIN METHOD ####################################################################

request_csv = input("Enter the name of your excel dataset file (.csv): \n")  # Requesting user's excel file ('iris.csv')
dataset = pd.read_csv(request_csv)  # Assigning variable 'dataset' to excel file user passes in
# print('\n', dataset.head(), '\n') # Prints out the dataset (table format)

visualisation_choice()  # Calling 'visualisation_choice' function to plot desired dataset visualisation
